!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1),o=n(2),i=n(3);o.NavBarComponent;const s=document.querySelector("#soundBoard");let u=i.SoundItemManager.soundItems;for(const t of u){let e=new r.SoundItemComponent(t);s.appendChild(e)}i.SoundItemManager.listChanged.subscribe(t=>{s.style.right="100vw",setTimeout(()=>{s.innerHTML="",u=t,console.log(t);for(const t of u){const e=new r.SoundItemComponent(t);s.appendChild(e)}s.style.right="0"},300)})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SoundItemComponent=void 0;class r extends HTMLElement{constructor(t){super();const e=this.attachShadow({mode:"open"}),n=document.createElement("div");n.classList.add("soundItem");const r=document.createElement("img");r.classList.add("icon"),r.setAttribute("src",t.imagePath);const o=document.createElement("h4");o.classList.add("title"),o.textContent=""+t.title;const i=document.createElement("div");i.classList.add("overlay");const s=document.createElement("img");s.setAttribute("src","/src/assets/images/stop-circle.svg");const u=document.createElement("audio");u.classList.add("audio"),u.setAttribute("src",t.audioPath),n.addEventListener("click",()=>{u.paused?u.play():(u.pause(),u.currentTime=0)}),u.addEventListener("play",()=>{i.style.display="flex"}),u.addEventListener("pause",()=>{i.style.display="none"});const c=document.createElement("link");c.setAttribute("rel","stylesheet"),c.setAttribute("href","/dist/app/components/sound-item/sound-item.component.css"),i.append(s),n.append(u,i,r,o),e.append(c,n)}}e.SoundItemComponent=r,customElements.define("sound-item",r)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NavBarComponent=void 0;const r=n(3);class o extends HTMLElement{constructor(){super();const t=this.attachShadow({mode:"open"}),e=document.createElement("link");e.setAttribute("rel","stylesheet"),e.setAttribute("href","/dist/app/components/navbar/navbar.component.css"),t.append(e);const n=document.createElement("template");n.innerHTML='\n      <nav class="navbar">\n        <ul class="navbar-nav">\n          <li class="logo">\n            <a>\n              <span class="logo-text">Logo</span>\n              <svg xmlns="http://www.w3.org/2000/svg"\n                  viewBox="0 0 448 512">\n                <path fill="currentColor"\n                      d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34zm192-34l-136-136c-9.4-9.4-24.6-9.4-33.9 0l-22.6 22.6c-9.4 9.4-9.4 24.6 0 33.9l96.4 96.4-96.4 96.4c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l136-136c9.4-9.2 9.4-24.4 0-33.8z">\n                </path>\n              </svg>\n            </a>\n          </li>\n          <li class="nav-item">\n            <a\n              class="nav-link"  \n              id="futuramaLink">\n              <img src="/src/assets/images/futurama_slurm_can.png"\n                  alt="A Futurama Slurm Can">\n              <span class="link-text">Futurama</span>\n            </a>\n          </li>\n          <li class="nav-item">\n            <a href="#"\n              class="nav-link"  \n              id="southParkLink">\n              <img src="/src/assets/images/south_park.png"\n                  alt="The South Park Logo">\n              <span class="link-text">South Park</span>\n            </a>\n          </li>\n          <li class="nav-item">\n            <a\n              class="nav-link"\n              id="arnoldLink">\n              <img src="/src/assets/images/arnold.png"\n                  alt="Arnold Schwarzenegger\'s Face ">\n              <span class="link-text">Arnold</span>\n            </a>\n          </li>\n          <li class="nav-item">\n            <a\n              class="nav-link"\n              id="allLink">\n              <img src="/src/assets/images/all.png"\n                  alt="A Question Mark ">\n              <span class="link-text">All</span>\n            </a>\n          </li>\n        </ul>\n      </nav>',t.append(n.content.cloneNode(!0));t.querySelector("#futuramaLink").addEventListener("click",()=>{r.SoundItemManager.changeLists("futurama")});t.querySelector("#southParkLink").addEventListener("click",()=>{r.SoundItemManager.changeLists("south_park")});t.querySelector("#arnoldLink").addEventListener("click",()=>{r.SoundItemManager.changeLists("arnold")});t.querySelector("#allLink").addEventListener("click",()=>{r.SoundItemManager.changeLists("all")})}}e.NavBarComponent=o,customElements.define("nav-bar",o)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SoundItemManager=void 0;const r=n(5),o=n(4);class i{constructor(){}static changeLists(t){let e=[];e="all"===t?this.soundItems:this.soundItems.filter(e=>(console.log("item.source: "+e.source),console.log("source: "+t),console.log(e.source===t),e.source===t)),console.log(e),this.listChanged.next(e)}static get soundItems(){return[...this._soundItems]}static get listChanged(){return i._listChanged}}e.SoundItemManager=i,i._soundItems=[new o.SoundItem("Ask Questions","arnold","arnold","/src/assets/audio/ask-ques.mp3","/src/assets/images/arnold.png"),new o.SoundItem("Cookie Down","arnold","arnold","/src/assets/audio/put-that-cookie-down-now-arnold-schwarzenegger.mp3","/src/assets/images/arnold.png"),new o.SoundItem("Fuck You","arnold","arnold","/src/assets/audio/fuck-you-arnold.mp3","/src/assets/images/arnold.png"),new o.SoundItem("Blackjack/Hookers","futurama","bender","/src/assets/audio/blackjack-and-hookers-the-great-and-powerful-trixie-futurama-mo1p-gojsqe.mp3","/src/assets/images/Bender.png"),new o.SoundItem("Take My Money","futurama","fry","/src/assets/audio/shut_up_and_take_my_moneymp3converter.mp3","/src/assets/images/Fry.png"),new o.SoundItem("Dooooooom","futurama","morbo","/src/assets/audio/futurama-morbo-doom.mp3","/src/assets/images/Morbo.png"),new o.SoundItem("Good News","futurama","professor_farnsworth","/src/assets/audio/goodnews_vVTJocq.mp3","/src/assets/images/Farnsworth.png"),new o.SoundItem("We Need Math","futurama","professor_farnsworth","/src/assets/audio/im-afraid-we-need-to-use.mp3","/src/assets/images/Farnsworth.png"),new o.SoundItem("Cartman Laughs","south_park","cartman","/src/assets/audio/cartman-laughs.mp3","/src/assets/images/Cartman.png"),new o.SoundItem("God Dammit","south_park","cartman","/src/assets/audio/god-damn-it-cartman.mp3","/src/assets/images/Cartman.png"),new o.SoundItem("Beefcake","south_park","cartman","/src/assets/audio/southpark_cartman_beefcake.mp3","/src/assets/images/Cartman.png"),new o.SoundItem("My Authority","south_park","cartman","/src/assets/audio/you-will-respect-my-authoritah_1.mp3","/src/assets/images/Cartman.png"),new o.SoundItem("Do What I Want","south_park","cartman","/src/assets/audio/i-do-what-i-want.mp3","/src/assets/images/Cartman.png")],i._listChanged=new r.Subject},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SoundItem=void 0;e.SoundItem=class{constructor(t,e,n,r,o){this._title=t,this._source=e,this._speaker=n,this._audioPath=r,this._imagePath=o}get title(){return this._title}get imagePath(){return this._imagePath}get audioPath(){return this._audioPath}get speaker(){return this._speaker}get source(){return this._source}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Observable",(function(){return S})),n.d(e,"ConnectableObservable",(function(){return P})),n.d(e,"GroupedObservable",(function(){return M})),n.d(e,"observable",(function(){return g})),n.d(e,"Subject",(function(){return T})),n.d(e,"BehaviorSubject",(function(){return F})),n.d(e,"ReplaySubject",(function(){return nt})),n.d(e,"AsyncSubject",(function(){return ot})),n.d(e,"asap",(function(){return pt})),n.d(e,"asapScheduler",(function(){return ft})),n.d(e,"async",(function(){return bt})),n.d(e,"asyncScheduler",(function(){return dt})),n.d(e,"queue",(function(){return R})),n.d(e,"queueScheduler",(function(){return H})),n.d(e,"animationFrame",(function(){return mt})),n.d(e,"animationFrameScheduler",(function(){return yt})),n.d(e,"VirtualTimeScheduler",(function(){return gt})),n.d(e,"VirtualAction",(function(){return wt})),n.d(e,"Scheduler",(function(){return q})),n.d(e,"Subscription",(function(){return p})),n.d(e,"Subscriber",(function(){return v})),n.d(e,"Notification",(function(){return $})),n.d(e,"NotificationKind",(function(){return z})),n.d(e,"pipe",(function(){return _})),n.d(e,"noop",(function(){return _t})),n.d(e,"identity",(function(){return w})),n.d(e,"isObservable",(function(){return xt})),n.d(e,"ArgumentOutOfRangeError",(function(){return St})),n.d(e,"EmptyError",(function(){return Et})),n.d(e,"ObjectUnsubscribedError",(function(){return I})),n.d(e,"UnsubscriptionError",(function(){return f})),n.d(e,"TimeoutError",(function(){return It})),n.d(e,"bindCallback",(function(){return Ot})),n.d(e,"bindNodeCallback",(function(){return Pt})),n.d(e,"combineLatest",(function(){return Wt})),n.d(e,"concat",(function(){return oe})),n.d(e,"defer",(function(){return ie})),n.d(e,"empty",(function(){return U})),n.d(e,"forkJoin",(function(){return se})),n.d(e,"from",(function(){return Qt})),n.d(e,"fromEvent",(function(){return ce})),n.d(e,"fromEventPattern",(function(){return ae})),n.d(e,"generate",(function(){return le})),n.d(e,"iif",(function(){return fe})),n.d(e,"interval",(function(){return de})),n.d(e,"merge",(function(){return ve})),n.d(e,"never",(function(){return me})),n.d(e,"of",(function(){return K})),n.d(e,"onErrorResumeNext",(function(){return ge})),n.d(e,"pairs",(function(){return we})),n.d(e,"partition",(function(){return ke})),n.d(e,"race",(function(){return je})),n.d(e,"range",(function(){return Ne})),n.d(e,"throwError",(function(){return X})),n.d(e,"timer",(function(){return Pe})),n.d(e,"using",(function(){return Me})),n.d(e,"zip",(function(){return Le})),n.d(e,"scheduled",(function(){return Jt})),n.d(e,"EMPTY",(function(){return B})),n.d(e,"NEVER",(function(){return ye})),n.d(e,"config",(function(){return u}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function o(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function i(t){return"function"==typeof t}var s=!1,u={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function c(t){setTimeout((function(){throw t}),0)}var a={closed:!0,next:function(t){},error:function(t){if(u.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},l=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function h(t){return null!==t&&"object"==typeof t}var f=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),p=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,r=this._ctorUnsubscribe,o=this._unsubscribe,s=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var u=0;u<n.length;++u){n[u].remove(this)}if(i(o)){r&&(this._unsubscribe=void 0);try{o.call(this)}catch(t){e=t instanceof f?d(t.errors):[t]}}if(l(s)){u=-1;for(var c=s.length;++u<c;){var a=s[u];if(h(a))try{a.unsubscribe()}catch(t){e=e||[],t instanceof f?e=e.concat(d(t.errors)):e.push(t)}}}if(e)throw new f(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var o=n._parentOrParents;if(null===o)n._parentOrParents=this;else if(o instanceof t){if(o===this)return n;n._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return n;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[n]:i.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function d(t){return t.reduce((function(t,e){return t.concat(e instanceof f?e.errors:e)}),[])}var b=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),v=function(t){function e(n,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=a;break;case 1:if(!n){i.destination=a;break}if("object"==typeof n){n instanceof e?(i.syncErrorThrowable=n.syncErrorThrowable,i.destination=n,n.add(i)):(i.syncErrorThrowable=!0,i.destination=new y(i,n));break}default:i.syncErrorThrowable=!0,i.destination=new y(i,n,r,o)}return i}return o(e,t),e.prototype[b]=function(){return this},e.create=function(t,n,r){var o=new e(t,n,r);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(p),y=function(t){function e(e,n,r,o){var s,u=t.call(this)||this;u._parentSubscriber=e;var c=u;return i(n)?s=n:n&&(s=n.next,r=n.error,o=n.complete,n!==a&&(i((c=Object.create(n)).unsubscribe)&&u.add(c.unsubscribe.bind(c)),c.unsubscribe=u.unsubscribe.bind(u))),u._context=c,u._next=s,u._error=r,u._complete=o,u}return o(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=u.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;c(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),u.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!u.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return u.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(c(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(v);function m(t){for(;t;){var e=t,n=e.closed,r=e.destination,o=e.isStopped;if(n||o)return!1;t=r&&r instanceof v?r:null}return!0}var g=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function w(t){return t}function _(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return x(t)}function x(t){return 0===t.length?w:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var S=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,o=function(t,e,n){if(t){if(t instanceof v)return t;if(t[b])return t[b]()}return t||e||n?new v(t,e,n):new v(a)}(t,e,n);if(r?o.add(r.call(o,this.source)):o.add(this.source||u.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),u.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){u.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),m(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=E(e))((function(e,r){var o;o=n.subscribe((function(e){try{t(e)}catch(t){r(t),o&&o.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[g]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:x(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=E(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function E(t){if(t||(t=u.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var I=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),k=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return o(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(p),j=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return o(e,t),e}(v),T=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return o(e,t),e.prototype[b]=function(){return new j(this)},e.prototype.lift=function(t){var e=new O(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new I;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),o=0;o<n;o++)r[o].next(t)},e.prototype.error=function(t){if(this.closed)throw new I;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),o=0;o<n;o++)r[o].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new I;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new I;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new I;return this.hasError?(t.error(this.thrownError),p.EMPTY):this.isStopped?(t.complete(),p.EMPTY):(this.observers.push(t),new k(this,t))},e.prototype.asObservable=function(){var t=new S;return t.source=this,t},e.create=function(t,e){return new O(t,e)},e}(S),O=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return o(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):p.EMPTY},e}(T);var N=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new C(t,n),o=e.subscribe(r);return r.closed||(r.connection=n.connect()),o},t}(),C=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return o(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(v),P=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return o(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new p).add(this.source.subscribe(new A(this.getSubject(),this))),t.closed&&(this._connection=null,t=p.EMPTY)),t},e.prototype.refCount=function(){return(t=this).lift(new N(t));var t},e}(S),A=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return o(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(j);var M=function(t){function e(e,n,r){var o=t.call(this)||this;return o.key=e,o.groupSubject=n,o.refCountSubscription=r,o}return o(e,t),e.prototype._subscribe=function(t){var e=new p,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new L(n)),e.add(r.subscribe(t)),e},e}(S),L=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return o(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(p),F=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return o(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new I;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(T),V=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return o(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return o(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(p)),Y=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(V),q=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),D=function(t){function e(n,r){void 0===r&&(r=q.now);var o=t.call(this,n,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return o(e,t),e.prototype.schedule=function(n,r,o){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,o):t.prototype.schedule.call(this,n,r,o)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(q),H=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(D))(Y),R=H,B=new S((function(t){return t.complete()}));function U(t){return t?function(t){return new S((function(e){return t.schedule((function(){return e.complete()}))}))}(t):B}function W(t){return t&&"function"==typeof t.schedule}var z,G=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function J(t,e){return new S((function(n){var r=new p,o=0;return r.add(e.schedule((function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function Q(t,e){return e?J(t,e):new S(G(t))}function K(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return W(n)?(t.pop(),J(t,n)):Q(t)}function X(t,e){return new S(e?function(n){return e.schedule(Z,0,{error:t,subscriber:n})}:function(e){return e.error(t)})}function Z(t){var e=t.error;t.subscriber.error(e)}z||(z={});var $=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return K(this.value);case"E":return X(this.error);case"C":return U()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();var tt=function(t){function e(e,n,r){void 0===r&&(r=0);var o=t.call(this,e)||this;return o.scheduler=n,o.delay=r,o}return o(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new et(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage($.createNext(t))},e.prototype._error=function(t){this.scheduleMessage($.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage($.createComplete()),this.unsubscribe()},e}(v),et=function(){return function(t,e){this.notification=t,this.destination=e}}(),nt=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var o=t.call(this)||this;return o.scheduler=r,o._events=[],o._infiniteTimeWindow=!1,o._bufferSize=e<1?1:e,o._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(o._infiniteTimeWindow=!0,o.next=o.nextInfiniteTimeWindow):o.next=o.nextTimeWindow,o}return o(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new rt(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),o=this.scheduler,i=r.length;if(this.closed)throw new I;if(this.isStopped||this.hasError?e=p.EMPTY:(this.observers.push(t),e=new k(this,t)),o&&t.add(t=new tt(t,o)),n)for(var s=0;s<i&&!t.closed;s++)t.next(r[s]);else for(s=0;s<i&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||R).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,o=r.length,i=0;i<o&&!(t-r[i].time<n);)i++;return o>e&&(i=Math.max(i,o-e)),i>0&&r.splice(0,i),r},e}(T),rt=function(){return function(t,e){this.time=t,this.value=e}}(),ot=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return o(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),p.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),p.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(T),it=1,st=function(){return Promise.resolve()}(),ut={};function ct(t){return t in ut&&(delete ut[t],!0)}var at=function(t){var e=it++;return ut[e]=!0,st.then((function(){return ct(e)&&t()})),e},lt=function(t){ct(t)},ht=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=at(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(lt(n),e.scheduled=void 0)},e}(V),ft=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,o=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<o&&(t=n.shift()));if(this.active=!1,e){for(;++r<o&&(t=n.shift());)t.unsubscribe();throw e}},e}(D))(ht),pt=ft,dt=new D(V),bt=dt,vt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(V),yt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,o=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<o&&(t=n.shift()));if(this.active=!1,e){for(;++r<o&&(t=n.shift());)t.unsubscribe();throw e}},e}(D))(vt),mt=yt,gt=function(t){function e(e,n){void 0===e&&(e=wt),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return o(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(D),wt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var o=t.call(this,e,n)||this;return o.scheduler=e,o.work=n,o.index=r,o.active=!0,o.index=e.index=r,o}return o(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var o=new e(this.scheduler,this.work);return this.add(o),o.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var o=t.actions;return o.push(this),o.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(V);function _t(){}function xt(t){return!!t&&(t instanceof S||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var St=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}(),Et=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}(),It=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}();function kt(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new jt(t,e))}}var jt=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Tt(t,this.project,this.thisArg))},t}(),Tt=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.project=n,o.count=0,o.thisArg=r||o,o}return o(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(v);function Ot(t,e,n){if(e){if(!W(e))return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return Ot(t,n).apply(void 0,r).pipe(kt((function(t){return l(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o,i=this,s={context:i,subject:o,callbackFunc:t,scheduler:n};return new S((function(r){if(n){var u={args:e,subscriber:r,params:s};return n.schedule(Nt,0,u)}if(!o){o=new ot;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){m(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function Nt(t){var e=this,n=t.args,r=t.subscriber,o=t.params,i=o.callbackFunc,s=o.context,u=o.scheduler,c=o.subject;if(!c){c=o.subject=new ot;try{i.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(Ct,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function Ct(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Pt(t,e,n){if(e){if(!W(e))return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return Pt(t,n).apply(void 0,r).pipe(kt((function(t){return l(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new S((function(r){var i=o.context,s=o.subject;if(n)return n.schedule(At,0,{params:o,subscriber:r,context:i});if(!s){s=o.subject=new ot;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){m(s)?s.error(t):console.warn(t)}}return s.subscribe(r)}))}}function At(t){var e=this,n=t.params,r=t.subscriber,o=t.context,i=n.callbackFunc,s=n.args,u=n.scheduler,c=n.subject;if(!c){c=n.subject=new ot;try{i.apply(o,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule(Lt,0,{err:r,subject:c}));else{var o=t.length<=1?t[0]:t;e.add(u.schedule(Mt,0,{value:o,subject:c}))}}]))}catch(t){this.add(u.schedule(Lt,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function Mt(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Lt(t){var e=t.err;t.subject.error(e)}var Ft=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.notifyNext=function(t,e,n,r,o){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(v),Vt=function(t){function e(e,n,r){var o=t.call(this)||this;return o.parent=e,o.outerValue=n,o.outerIndex=r,o.index=0,o}return o(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(v);function Yt(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var qt=Yt(),Dt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Ht(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var Rt=function(t){if(t&&"function"==typeof t[g])return r=t,function(t){var e=r[g]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Dt(t))return G(t);if(Ht(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,c),t};if(t&&"function"==typeof t[qt])return e=t,function(t){for(var n=e[qt]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,r,o=h(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+o+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function Bt(t,e,n,r,o){if(void 0===o&&(o=new Vt(t,n,r)),!o.closed)return e instanceof S?e.subscribe(o):Rt(e)(o)}var Ut={};function Wt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=void 0,r=void 0;return W(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&l(t[0])&&(t=t[0]),Q(t,r).lift(new zt(n))}var zt=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Gt(t,this.resultSelector))},t}(),Gt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return o(e,t),e.prototype._next=function(t){this.values.push(Ut),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Bt(this,r,void 0,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n){var r=this.values,o=r[n],i=this.toRespond?o===Ut?--this.toRespond:this.toRespond:0;r[n]=e,0===i&&(this.resultSelector?this._tryResultSelector(r):this.destination.next(r.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(Ft);function Jt(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[g]}(t))return function(t,e){return new S((function(n){var r=new p;return r.add(e.schedule((function(){var o=t[g]();r.add(o.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(Ht(t))return function(t,e){return new S((function(n){var r=new p;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(Dt(t))return J(t,e);if(function(t){return t&&"function"==typeof t[qt]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new S((function(n){var r,o=new p;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(e.schedule((function(){r=t[qt](),o.add(e.schedule((function(){if(!n.closed){var t,e;try{var o=r.next();t=o.value,e=o.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),o}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function Qt(t,e){return e?Jt(t,e):t instanceof S?t:new S(Rt(t))}var Kt=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,n}return o(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(v),Xt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(v);function Zt(t,e){if(!e.closed)return t instanceof S?t.subscribe(e):Rt(t)(e)}function $t(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe($t((function(n,r){return Qt(t(n,r)).pipe(kt((function(t,o){return e(n,t,r,o)})))}),n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new te(t,n))})}var te=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new ee(t,this.project,this.concurrent))},t}(),ee=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return o(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new Kt(this),n=this.destination;n.add(e);var r=Zt(t,e);r!==e&&n.add(r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(Xt);function ne(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),$t(w,t)}function re(){return ne(1)}function oe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return re()(K.apply(void 0,t))}function ie(t){return new S((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Qt(n):U()).subscribe(e)}))}function se(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(l(n))return ue(n,null);if(h(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return ue(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var o=t.pop();return ue(t=1===t.length&&l(t[0])?t[0]:t,null).pipe(kt((function(t){return o.apply(void 0,t)})))}return ue(t,null)}function ue(t,e){return new S((function(n){var r=t.length;if(0!==r)for(var o=new Array(r),i=0,s=0,u=function(u){var c=Qt(t[u]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,s++),o[u]=t},error:function(t){return n.error(t)},complete:function(){++i!==r&&a||(s===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=o[n],t}),{}):o),n.complete())}}))},c=0;c<r;c++)u(c);else n.complete()}))}function ce(t,e,n,r){return i(n)&&(r=n,n=void 0),r?ce(t,e,n).pipe(kt((function(t){return l(t)?r.apply(void 0,t):r(t)}))):new S((function(r){!function t(e,n,r,o,i){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,i),s=function(){return u.removeEventListener(n,r,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),s=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),s=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,h=e.length;l<h;l++)t(e[l],n,r,o,i)}o.add(s)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function ae(t,e,n){return n?ae(t,e).pipe(kt((function(t){return l(t)?n.apply(void 0,t):n(t)}))):new S((function(n){var r,o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(o)}catch(t){return void n.error(t)}if(i(e))return function(){return e(o,r)}}))}function le(t,e,n,r,o){var i,s;if(1==arguments.length){var u=t;s=u.initialState,e=u.condition,n=u.iterate,i=u.resultSelector||w,o=u.scheduler}else void 0===r||W(r)?(s=t,i=w,o=r):(s=t,i=r);return new S((function(t){var r=s;if(o)return o.schedule(he,0,{subscriber:t,iterate:n,condition:e,resultSelector:i,state:r});for(;;){if(e){var u=void 0;try{u=e(r)}catch(e){return void t.error(e)}if(!u){t.complete();break}}var c=void 0;try{c=i(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function he(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var o;try{o=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(o),!e.closed))return this.schedule(t)}}function fe(t,e,n){return void 0===e&&(e=B),void 0===n&&(n=B),ie((function(){return t()?e:n}))}function pe(t){return!l(t)&&t-parseFloat(t)+1>=0}function de(t,e){return void 0===t&&(t=0),void 0===e&&(e=bt),(!pe(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=bt),new S((function(n){return n.add(e.schedule(be,t,{subscriber:n,counter:0,period:t})),n}))}function be(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}function ve(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,o=t[t.length-1];return W(o)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof o&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof S?t[0]:ne(n)(Q(t,r))}var ye=new S(_t);function me(){return ye}function ge(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return B;var n=t[0],r=t.slice(1);return 1===t.length&&l(n)?ge.apply(void 0,n):new S((function(t){var e=function(){return t.add(ge.apply(void 0,r).subscribe(t))};return Qt(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function we(t,e){return new S(e?function(n){var r=Object.keys(t),o=new p;return o.add(e.schedule(_e,0,{keys:r,index:0,subscriber:n,subscription:o,obj:t})),o}:function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var o=n[r];t.hasOwnProperty(o)&&e.next([o,t[o]])}e.complete()})}function _e(t){var e=t.keys,n=t.index,r=t.subscriber,o=t.subscription,i=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,i[s]]),o.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:o,obj:i}))}else r.complete()}function xe(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}function Se(t,e){return function(n){return n.lift(new Ee(t,e))}}var Ee=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Ie(t,this.predicate,this.thisArg))},t}(),Ie=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.count=0,o}return o(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(v);function ke(t,e,n){return[Se(e,n)(new S(Rt(t))),Se(xe(e,n))(new S(Rt(t)))]}function je(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!l(t[0]))return t[0];t=t[0]}return Q(t,void 0).lift(new Te)}var Te=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Oe(t))},t}(),Oe=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return o(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=Bt(this,t[n],void 0,n);this.subscriptions&&this.subscriptions.push(r),this.add(r)}this.observables=null}},e.prototype.notifyNext=function(t,e,n){if(!this.hasFirst){this.hasFirst=!0;for(var r=0;r<this.subscriptions.length;r++)if(r!==n){var o=this.subscriptions[r];o.unsubscribe(),this.remove(o)}this.subscriptions=null}this.destination.next(e)},e}(Ft);function Ne(t,e,n){return void 0===t&&(t=0),new S((function(r){void 0===e&&(e=t,t=0);var o=0,i=t;if(n)return n.schedule(Ce,0,{index:o,count:e,start:t,subscriber:r});for(;;){if(o++>=e){r.complete();break}if(r.next(i++),r.closed)break}}))}function Ce(t){var e=t.start,n=t.index,r=t.count,o=t.subscriber;n>=r?o.complete():(o.next(e),o.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}function Pe(t,e,n){void 0===t&&(t=0);var r=-1;return pe(e)?r=Number(e)<1?1:Number(e):W(e)&&(n=e),W(n)||(n=bt),new S((function(e){var o=pe(t)?t:+t-n.now();return n.schedule(Ae,o,{index:0,period:r,subscriber:e})}))}function Ae(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function Me(t,e){return new S((function(n){var r,o;try{r=t()}catch(t){return void n.error(t)}try{o=e(r)}catch(t){return void n.error(t)}var i=(o?Qt(o):B).subscribe(n);return function(){i.unsubscribe(),r&&r.unsubscribe()}}))}function Le(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),Q(t,void 0).lift(new Fe(n))}var Fe=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Ve(t,this.resultSelector))},t}(),Ve=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var o=t.call(this,e)||this;return o.resultSelector=n,o.iterators=[],o.active=0,o.resultSelector="function"==typeof n?n:void 0,o}return o(e,t),e.prototype._next=function(t){var e=this.iterators;l(t)?e.push(new qe(t)):"function"==typeof t[qt]?e.push(new Ye(t[qt]())):e.push(new De(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe());else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return}var o=!1,i=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(o=!0),u.done)return void n.complete();i.push(u.value)}this.resultSelector?this._tryresultSelector(i):n.next(i),o&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(v),Ye=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return Boolean(t&&t.done)},t}(),qe=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[qt]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),De=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.parent=n,o.observable=r,o.stillUnsubscribed=!0,o.buffer=[],o.isComplete=!1,o}return o(e,t),e.prototype[qt]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t){this.buffer.push(t),this.parent.checkIterators()},e.prototype.subscribe=function(){return Zt(this.observable,new Kt(this))},e}(Xt)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,